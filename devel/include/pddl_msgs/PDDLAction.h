// Generated by gencpp from file pddl_msgs/PDDLAction.msg
// DO NOT EDIT!


#ifndef PDDL_MSGS_MESSAGE_PDDLACTION_H
#define PDDL_MSGS_MESSAGE_PDDLACTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pddl_msgs
{
template <class ContainerAllocator>
struct PDDLAction_
{
  typedef PDDLAction_<ContainerAllocator> Type;

  PDDLAction_()
    : name()
    , parameters()
    , precondition()
    , effect()
    , on_condition()
    , action_duration()  {
    }
  PDDLAction_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , parameters(_alloc)
    , precondition(_alloc)
    , effect(_alloc)
    , on_condition(_alloc)
    , action_duration(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _parameters_type;
  _parameters_type parameters;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _precondition_type;
  _precondition_type precondition;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _effect_type;
  _effect_type effect;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _on_condition_type;
  _on_condition_type on_condition;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_duration_type;
  _action_duration_type action_duration;




  typedef boost::shared_ptr< ::pddl_msgs::PDDLAction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pddl_msgs::PDDLAction_<ContainerAllocator> const> ConstPtr;

}; // struct PDDLAction_

typedef ::pddl_msgs::PDDLAction_<std::allocator<void> > PDDLAction;

typedef boost::shared_ptr< ::pddl_msgs::PDDLAction > PDDLActionPtr;
typedef boost::shared_ptr< ::pddl_msgs::PDDLAction const> PDDLActionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pddl_msgs::PDDLAction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pddl_msgs::PDDLAction_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pddl_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'pddl_msgs': ['/home/francesco/planning_ws/devel/share/pddl_msgs/msg', '/home/francesco/planning_ws/src/spqr_planning_and_reasoning/jsk_planning/pddl/pddl_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pddl_msgs::PDDLAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pddl_msgs::PDDLAction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pddl_msgs::PDDLAction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pddl_msgs::PDDLAction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pddl_msgs::PDDLAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pddl_msgs::PDDLAction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pddl_msgs::PDDLAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b7889bb912b39c8d55cfbda20fd28a0a";
  }

  static const char* value(const ::pddl_msgs::PDDLAction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb7889bb912b39c8dULL;
  static const uint64_t static_value2 = 0x55cfbda20fd28a0aULL;
};

template<class ContainerAllocator>
struct DataType< ::pddl_msgs::PDDLAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pddl_msgs/PDDLAction";
  }

  static const char* value(const ::pddl_msgs::PDDLAction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pddl_msgs::PDDLAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n\
# write String in S expression like \"(and foo var)\"\n\
string parameters\n\
string precondition\n\
string effect\n\
string on_condition\n\
# we can't use duration name\n\
string action_duration\n\
";
  }

  static const char* value(const ::pddl_msgs::PDDLAction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pddl_msgs::PDDLAction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.parameters);
      stream.next(m.precondition);
      stream.next(m.effect);
      stream.next(m.on_condition);
      stream.next(m.action_duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PDDLAction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pddl_msgs::PDDLAction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pddl_msgs::PDDLAction_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "parameters: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.parameters);
    s << indent << "precondition: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.precondition);
    s << indent << "effect: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.effect);
    s << indent << "on_condition: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.on_condition);
    s << indent << "action_duration: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action_duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PDDL_MSGS_MESSAGE_PDDLACTION_H
