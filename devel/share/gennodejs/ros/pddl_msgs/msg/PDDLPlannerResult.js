// Auto-generated. Do not edit!

// (in-package pddl_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let PDDLStep = require('./PDDLStep.js');

//-----------------------------------------------------------

class PDDLPlannerResult {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.data = null;
      this.use_durative_action = null;
      this.sequence = null;
    }
    else {
      if (initObj.hasOwnProperty('data')) {
        this.data = initObj.data
      }
      else {
        this.data = [];
      }
      if (initObj.hasOwnProperty('use_durative_action')) {
        this.use_durative_action = initObj.use_durative_action
      }
      else {
        this.use_durative_action = false;
      }
      if (initObj.hasOwnProperty('sequence')) {
        this.sequence = initObj.sequence
      }
      else {
        this.sequence = [];
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type PDDLPlannerResult
    // Serialize message field [data]
    bufferOffset = _arraySerializer.string(obj.data, buffer, bufferOffset, null);
    // Serialize message field [use_durative_action]
    bufferOffset = _serializer.bool(obj.use_durative_action, buffer, bufferOffset);
    // Serialize message field [sequence]
    // Serialize the length for message field [sequence]
    bufferOffset = _serializer.uint32(obj.sequence.length, buffer, bufferOffset);
    obj.sequence.forEach((val) => {
      bufferOffset = PDDLStep.serialize(val, buffer, bufferOffset);
    });
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type PDDLPlannerResult
    let len;
    let data = new PDDLPlannerResult(null);
    // Deserialize message field [data]
    data.data = _arrayDeserializer.string(buffer, bufferOffset, null)
    // Deserialize message field [use_durative_action]
    data.use_durative_action = _deserializer.bool(buffer, bufferOffset);
    // Deserialize message field [sequence]
    // Deserialize array length for message field [sequence]
    len = _deserializer.uint32(buffer, bufferOffset);
    data.sequence = new Array(len);
    for (let i = 0; i < len; ++i) {
      data.sequence[i] = PDDLStep.deserialize(buffer, bufferOffset)
    }
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    object.data.forEach((val) => {
      length += 4 + val.length;
    });
    object.sequence.forEach((val) => {
      length += PDDLStep.getMessageSize(val);
    });
    return length + 9;
  }

  static datatype() {
    // Returns string type for a message object
    return 'pddl_msgs/PDDLPlannerResult';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '9220276db431d308099ea5d53fef9a9b';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #result
    string[] data
    bool use_durative_action
    pddl_msgs/PDDLStep[] sequence
    
    ================================================================================
    MSG: pddl_msgs/PDDLStep
    string action
    string[] args
    string start_time
    # we can't use duration name
    string action_duration
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new PDDLPlannerResult(null);
    if (msg.data !== undefined) {
      resolved.data = msg.data;
    }
    else {
      resolved.data = []
    }

    if (msg.use_durative_action !== undefined) {
      resolved.use_durative_action = msg.use_durative_action;
    }
    else {
      resolved.use_durative_action = false
    }

    if (msg.sequence !== undefined) {
      resolved.sequence = new Array(msg.sequence.length);
      for (let i = 0; i < resolved.sequence.length; ++i) {
        resolved.sequence[i] = PDDLStep.Resolve(msg.sequence[i]);
      }
    }
    else {
      resolved.sequence = []
    }

    return resolved;
    }
};

module.exports = PDDLPlannerResult;
