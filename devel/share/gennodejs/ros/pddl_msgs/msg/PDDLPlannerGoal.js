// Auto-generated. Do not edit!

// (in-package pddl_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let PDDLDomain = require('./PDDLDomain.js');
let PDDLProblem = require('./PDDLProblem.js');

//-----------------------------------------------------------

class PDDLPlannerGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.domain = null;
      this.problem = null;
    }
    else {
      if (initObj.hasOwnProperty('domain')) {
        this.domain = initObj.domain
      }
      else {
        this.domain = new PDDLDomain();
      }
      if (initObj.hasOwnProperty('problem')) {
        this.problem = initObj.problem
      }
      else {
        this.problem = new PDDLProblem();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type PDDLPlannerGoal
    // Serialize message field [domain]
    bufferOffset = PDDLDomain.serialize(obj.domain, buffer, bufferOffset);
    // Serialize message field [problem]
    bufferOffset = PDDLProblem.serialize(obj.problem, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type PDDLPlannerGoal
    let len;
    let data = new PDDLPlannerGoal(null);
    // Deserialize message field [domain]
    data.domain = PDDLDomain.deserialize(buffer, bufferOffset);
    // Deserialize message field [problem]
    data.problem = PDDLProblem.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += PDDLDomain.getMessageSize(object.domain);
    length += PDDLProblem.getMessageSize(object.problem);
    return length;
  }

  static datatype() {
    // Returns string type for a message object
    return 'pddl_msgs/PDDLPlannerGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '8aef2308ded6c458e78cccad317acb8d';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # goal
    pddl_msgs/PDDLDomain domain
    pddl_msgs/PDDLProblem problem
    
    ================================================================================
    MSG: pddl_msgs/PDDLDomain
    string name
    string requirements
    string[] types
    string[] constants
    string[] predicates
    pddl_msgs/PDDLAction[] actions
    string[] functions
    
    ================================================================================
    MSG: pddl_msgs/PDDLAction
    string name
    # write String in S expression like "(and foo var)"
    string parameters
    string precondition
    string effect
    string on_condition
    # we can't use duration name
    string action_duration
    ================================================================================
    MSG: pddl_msgs/PDDLProblem
    string name          # name of problem
    string domain        # name of domain to use
    pddl_msgs/PDDLObject[] objects # how to represent type?
    string[] initial     # initial condition
    string goal          # goal conjunction
    string metric        # metric
    
    
    ================================================================================
    MSG: pddl_msgs/PDDLObject
    # definition of PDDLObject
    string name
    string type
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new PDDLPlannerGoal(null);
    if (msg.domain !== undefined) {
      resolved.domain = PDDLDomain.Resolve(msg.domain)
    }
    else {
      resolved.domain = new PDDLDomain()
    }

    if (msg.problem !== undefined) {
      resolved.problem = PDDLProblem.Resolve(msg.problem)
    }
    else {
      resolved.problem = new PDDLProblem()
    }

    return resolved;
    }
};

module.exports = PDDLPlannerGoal;
